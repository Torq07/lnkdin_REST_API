require 'singleton'
require 'net/ssh'
require 'json'
require 'net/ssh/session'


class PriorityQueue
	
	include Singleton	
	
	attr_reader :run, :elements
		
  def initialize
    @elements = [nil]
		@results = {}
  end

  def <<(element)
    @elements << element
		bubble_up(@elements.size - 1)
		get_data unless @run
  end

	def bubble_up(index)
		parent_index = (index / 2)
		# return if we reach the root element
		return if index <= 1

		# or if the parent is already greater than the child
		return if @elements[parent_index] >= @elements[index]

		# otherwise we exchange the child with the parent
		exchange(index, parent_index)

		# and keep bubbling up
		bubble_up(parent_index)
	end

	def exchange(source, target)
		@elements[source], @elements[target] = @elements[target], @elements[source]
	end

	def pop
		# exchange the root with the last element
		exchange(1, @elements.size - 1)

		# remove the last element of the list
		max = @elements.pop

		# and make sure the tree is ordered again
		bubble_down(1)
		max
	end

	def bubble_down(index)
	child_index = (index * 2)

		# stop if we reach the bottom of the tree
		return if child_index > @elements.size - 1

		# make sure we get the largest child
		not_the_last_element = child_index < @elements.size - 1
		left_element = @elements[child_index]
		right_element = @elements[child_index + 1]
		child_index += 1 if not_the_last_element && right_element > left_element

		# there is no need to continue if the parent element is already bigger
		# then its children
		return if @elements[index] >= @elements[child_index]

		exchange(index, child_index)

		# repeat the process until we reach a point where the parent
		# is larger than its children
	 	bubble_down(child_index)
	end

	def size
		@elements.size
	end

	def get_data
		
		# Creating temp file url.txt  with url instructions for local machine 
		# which will parse data with Linkedin Scrapper and save it 
		# at server /tmp/socket/profile.json
		# Then getting data from raw scrapped data saved at profile.json
		# Execute logic and push cleared data into result hash

		@run=true

		create_url_file=Proc.new {|path,n| File.open(path,'w+') {|f| f.puts n.name}; true }

		while PriorityQueue.instance.size-1>0
		  p element=PriorityQueue.instance.pop
			path_to_url_file="#{Rails.root}/tmp/sockets/url.txt" 
			
			create_url_file.call(path_to_url_file,element) 

			while File.exist?(path_to_url_file) 
				#puts 'closure in waiting the url'
				sleep 1
			end
			
		end
		@run=false
	end

end



